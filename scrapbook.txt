
  @Value("${spring.kafka.consumer.key-deserializer}")
  private String consumerKeyDeserializer;

  @Value("${spring.kafka.consumer.value-deserializer}")
  private String consumerValueDeserializer;

  @Value("${spring.kafka.consumer.properties.spring.json.trusted.packages}")
  private String consumerTrustedPackages;


  private static final String consumerGroupID = "inventory-service-test";
  private static final String consumerClientID = "inventory-service-test-driver";
  

  private Properties consumerProperties = new Properties();

  // When polling for the status message posted by the OrderCompletionListener, use the Apache Kafka Client api directly.
  private Properties getKafkaConsumerConfig() {
    if( consumerProperties.isEmpty() ) {
      consumerProperties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
      consumerProperties.put(ConsumerConfig.GROUP_ID_CONFIG, consumerGroupID);
      consumerProperties.put(ConsumerConfig.CLIENT_ID_CONFIG, consumerClientID);
      consumerProperties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, consumerKeyDeserializer);
      consumerProperties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, consumerValueDeserializer);
      consumerProperties.put(JsonDeserializer.TRUSTED_PACKAGES, consumerTrustedPackages);
    }
    return consumerProperties;
  }
  



    // Verify InventoryService posted "updated" notice
    // Note that a KafkaConsumer is Closeable
    log.info("Checking for InventoryUpdatedNotice");
    try (Consumer<String, InventoryUpdatedNotice> consumer = new KafkaConsumer<>(getKafkaConsumerConfig())) {
      
      consumer.subscribe(Collections.singletonList(inventoryTopicName)); 
      
      ConsumerRecords<String, InventoryUpdatedNotice> records = consumer.poll(Duration.ofSeconds(1));
      log.info("Found {} consumer records on first poll", records.count());
      for (ConsumerRecord<String, InventoryUpdatedNotice> record : records)
      {
          log.info("topic = {}, key = {}, value = {}\n",
              record.topic(),
              record.key(), 
              record.value());
          return;
      }
      fail("Did not detect InventoryUpdatedNotice for inventory item");
    }
  

  
      // Verify InventoryService posted "invalid" notice
    // Note that a KafkaConsumer is Closeable
    log.info("Checking for InventoryUpdatedNotice");
    try (Consumer<String, InvalidOrderNotice> consumer = new KafkaConsumer<>(getKafkaConsumerConfig())) {
      
      consumer.subscribe(Collections.singletonList(inventoryTopicName)); 
      
      ConsumerRecords<String, InvalidOrderNotice> records = consumer.poll(Duration.ofSeconds(1));
      log.info("Found {} consumer records on first poll", records.count());
      for (ConsumerRecord<String, InvalidOrderNotice> record : records)
      {
          log.info("topic = {}, key = {}, value = {}\n",
              record.topic(),
              record.key(), 
              record.value());
          return;
      }
      fail("Did not detect InvalidOrderNotice for invalid inventory item id");
    }

  